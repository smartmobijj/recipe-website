<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe Explorer</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="icon" type="image/png" href="/favicon.png">
</head>
<body onload="loadContinents()">
    <div class="container">
        <h1 class="recipe-title">Discover Teenage-Friendly Recipes</h1>

        <!-- <h1 class="recipe-title">Use the nav-bar to navigate</h1> -->
        <br>
        <div class="home-link">
           
<div id="myNav" class="sidebar">
  <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">√ó</a>
  <div class="overlay-content">
    <a href="/about">About</a>
    <a href="/select-ingredients">Create Your Own Meal</a>
    <a href="/selected-recipes">View Selected</a>
    <a href="/tutorial">üìñ Tutorial</a>
    <a href="/reference">üìé References</a> <!-- ‚úÖ ADDED THIS -->
  </div>  
</div>


    <div class="nav-icon" onclick="openNav()">
        <div class="bar1"></div>
        <div class="bar2"></div>
        <div class="bar3"></div>
        <div class="bar4"></div>
    </div>
  
        </div>


        <!-- üîç Search Bar -->
        <input type="text" id="search" placeholder="Search for a recipe..." oninput="searchRecipes()">
        <div id="search-results-container" class="recipe-grid"></div>

        <!-- üåç Dropdown for Continent & Country Selection -->
        <select id="continent-select" onchange="loadCountries()">
            <option value="">Select Continent</option>
        </select>

        <select id="country-select" disabled>
            <option value="">Select Country</option>
        </select>

        <button onclick="filterRecipes()">Find Recipes</button>

        <!-- ‚úÖ "Create Your Own Meal" Button -->
        <a href="/select-ingredients"><button>üîç Create Your Own Meal</button></a>

        <!-- ‚úÖ "About Us" Button -->
        <a href="/about"><button>üìñ About Us</button></a>


        <!-- ‚úÖ "Our Random Ten Recipes" Section -->
        <section class="random-recipes">
            <h2 class="recipe-title">üçΩÔ∏è Our Random Ten Recipes</h2>
            <button onclick="updateUnselectedRecipes()">üîÅ Update Unselected</button>

            <div class="recipe-grid">
                <% if (recipes.length > 0) { %>
                    <% recipes.forEach(recipe => { %>
                        <div class="recipe-card">
                            <div class="image-container">
                                <input type="checkbox" class="select-recipe"
                                    data-recipe="<%= JSON.stringify({
                                      title: recipe.title,
                                      image: recipe.image,
                                      url: recipe.url,
                                      filename: recipe.filename
                                    }) %>" />
                                <a href="<%= recipe.url %>">
                                    <img src="<%= recipe.image %>" alt="<%= recipe.title %>" onerror="this.src='/recipes429/images/default.jpg'">
                                </a>
                            </div>
                            <h3 class="recipe-title"><%= recipe.title %></h3>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No recipes available.</p>
                <% } %>
            </div>            
        </section>
    </div>

<!-- ‚úÖ "Team Members' Favorite Dishes" Section -->
<details>
    <summary class="dropdown-title">üë©‚Äçüç≥ Team Members' Favorite Dishes</summary>
    <section class="team-favorites">
      <div class="recipe-grid">
        <% if (typeof teamFavorites !== "undefined" && teamFavorites.length > 0) { %>
            <% teamFavorites.forEach(recipe => { %>
                <div class="recipe-card">
                    <div class="image-container">
                        <input type="checkbox" class="select-recipe"
                            data-recipe="<%= JSON.stringify({
                              title: recipe.title,
                              image: recipe.image,
                              url: recipe.url,
                              filename: recipe.filename
                            }) %>" />
                        <a href="<%= recipe.url %>">
                            <img src="<%= recipe.image %>" alt="<%= recipe.title %>" onerror="this.src='/recipes429/images/default.jpg'">
                        </a>
                    </div>
                    <h3 class="recipe-title"><%= recipe.title %></h3>
                </div>
            <% }) %>
        <% } else { %>
            <p>No team favorite recipes available.</p>
        <% } %>
      </div>
    </section>
  </details>
  

<!-- ‚úÖ "Top 10 Easy Recipes" Section -->
<details>
    <summary class="dropdown-title">üåü Top 10 Easy Recipes</summary>
    <section class="easy-recipes">
      <div class="recipe-grid">
        <% if (easyRecipes && easyRecipes.length > 0) { %>
            <% easyRecipes.forEach(recipe => { %>
                <div class="recipe-card">
                    <div class="image-container">
                        <input type="checkbox" class="select-recipe"
                        data-recipe="<%= JSON.stringify({
                          title: recipe.title,
                          image: recipe.image,
                          url: recipe.url,
                          filename: recipe.filename
                        }) %>" />
                        <a href="<%= recipe.url %>">
                            <img src="<%= recipe.image %>" alt="<%= recipe.title %>" />
                        </a>
                    </div>
                    <h3 class="recipe-title"><%= recipe.title %></h3>
                </div>
            <% }) %>
        <% } else { %>
            <p>No easy recipes available.</p>
        <% } %>
      </div>
    </section>
  </details>
  
  <script>
    function openNav() {
      document.getElementById("myNav").style.width = "300px"; // or 250px
    }
    
    function closeNav() {
      document.getElementById("myNav").style.width = "0";
    }
    
    function xchanger(x) {
      //x.classList.toggle("change");
      openNav(); // open from left
    }
    
            async function loadContinents() {
                try {
                    const response = await fetch('/getContinents');
                    const continents = await response.json();
                    const continentSelect = document.getElementById('continent-select');
    
                    continentSelect.innerHTML = '<option value="">Select Continent</option>';
                    continents.forEach(continent => {
                        const option = document.createElement('option');
                        option.value = continent;
                        option.textContent = continent;
                        continentSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error("‚ùå Error loading continents:", error);
                }
            }
    
    // window.addEventListener('DOMContentLoaded', () => {
    //     const continentSelect = document.getElementById('continent-select');
    //     const countrySelect = document.getElementById('country-select');
    
    //     continentSelect.addEventListener('change', async () => {
    //         const continent = continentSelect.value;
    
    //         if (!continent) {
    //             countrySelect.innerHTML = '<option value="">Select Country</option>';
    //             countrySelect.disabled = true;
    //             return;
    //         }
    
    //         try {
    //             console.log("üåç Selected continent:", continent);
    //             const response = await fetch(`/getCountries?continent=${encodeURIComponent(continent)}`);
    
    //             if (!response.ok) {
    //                 throw new Error(`Server responded with ${response.status}`);
    //             }
    
    //             const countries = await response.json();
    //             console.log(`üó∫Ô∏è Countries for ${continent}:`, countries);
    
    //             countrySelect.innerHTML = '<option value="">Select Country</option>';
    
    //             if (countries.length === 0) {
    //                 alert(`No countries found for continent: ${continent}`);
    //                 countrySelect.disabled = true;
    //                 return;
    //             }
    
    //             countries.forEach(country => {
    //                 const option = document.createElement('option');
    //                 option.value = country;
    //                 option.textContent = country;
    //                 countrySelect.appendChild(option);
    //             });
    
    //             countrySelect.disabled = false;
    
    //         } catch (error) {
    //             console.error("‚ùå Error loading countries:", error);
    //             alert("Failed to load countries. Please try again.");
    //         }
    //     });
    // });
    
    
            // ‚úÖ Redirect to filtered recipe results
            function filterRecipes() {
                const continent = document.getElementById('continent-select').value;
                const country = document.getElementById('country-select').value;
    
                if (!continent || !country) {
                    alert("Please select a continent and a country.");
                    return;
                }
    
                window.location.href = `/recipes/${encodeURIComponent(continent)}/${encodeURIComponent(country)}`;
            }
    
    // ‚úÖ Fetch and Display Search Results
    async function searchRecipes() {
        const query = document.getElementById('search').value.trim();
        const resultsContainer = document.getElementById('search-results-container');
        resultsContainer.innerHTML = '';
    
        if (!query) return;
    
        const response = await fetch('/search?query=' + encodeURIComponent(query));
        const recipes = await response.json();
    
        if (recipes.length === 0) {
            resultsContainer.innerHTML = '<p>No recipes found.</p>';
            return;
        }
    
        const grid = document.createElement('div');
        grid.className = 'recipe-grid';
    
        recipes.forEach(recipe => {
            const card = document.createElement('div');
            card.className = 'recipe-card';
            card.innerHTML = `
                <div class="image-container">
                    <input type="checkbox" class="select-recipe"
                        data-recipe='${JSON.stringify({
                            title: recipe.title,
                            image: recipe.image,
                            url: recipe.url,
                            filename: recipe.filename
                        })}' />
                    <a href="${recipe.url}">
                        <img src="${recipe.image}" alt="${recipe.title}" onerror="this.src='/recipes429/images/default.jpg'">
                    </a>
                </div>
                <h3 class="recipe-title">${recipe.title}</h3>
            `;
            grid.appendChild(card);
        });
    
        resultsContainer.appendChild(grid);
    
        // ‚úÖ Reattach checkbox handlers
        const selectedRecipesKey = 'selectedRecipes';
        const displayedRecipesKey = 'displayedRecipes';
    
        document.querySelectorAll('.select-recipe').forEach(box => {
            const recipe = JSON.parse(box.dataset.recipe);
            let selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    
            // ‚úÖ Pre-check if already selected
            if (selected.some(r => r.filename === recipe.filename)) {
                box.checked = true;
            }
    
            box.addEventListener('change', () => {
                selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    
                if (box.checked) {
                    if (!selected.some(r => r.filename === recipe.filename)) {
                        selected.push(recipe);
                    }
                } else {
                    selected = selected.filter(r => r.filename !== recipe.filename);
                }
    
                sessionStorage.setItem(selectedRecipesKey, JSON.stringify(selected));
                const countElement = document.getElementById('selected-count');
                if (countElement) countElement.textContent = selected.length;
            });
        });
    }
    
        async function updateUnselectedRecipes() {
            //alert("üü° updateUnselectedRecipes() called"); // step 1 test

            const selected = JSON.parse(sessionStorage.getItem('selectedRecipes') || '[]');
            const selectedFilenames = selected.map(r => r.filename);
            //alert("‚úÖ Selected count: " + selectedFilenames.length);
    
            // const allDisplayedCheckboxes = document.querySelectorAll('.random-recipes .select-recipe');
            // const displayedFilenames = Array.from(allDisplayedCheckboxes).map(box => {
            //     const recipe = JSON.parse(box.dataset.recipe);
            //     return recipe.filename;
            // });
            // alert("üñºÔ∏è Displayed recipe filenames:", displayedFilenames);

            let allDisplayedCheckboxes;
            let displayedFilenames = [];

            try {
                //alert("üîç Attempting to query all checkboxes...");
                allDisplayedCheckboxes = document.querySelectorAll('.random-recipes .select-recipe');
                //alert("‚úÖ Found " + allDisplayedCheckboxes.length + " .select-recipe checkboxes");

                displayedFilenames = Array.from(allDisplayedCheckboxes).map((box, index) => {
                    try {
                        const recipe = JSON.parse(decodeURIComponent(box.dataset.recipe));
                        if (!recipe || !recipe.filename) {
                            throw new Error("Missing recipe or filename in checkbox #" + index);
                        }
                        return recipe.filename;
                    } catch (e) {
                        //alert("‚ùå Error parsing data-recipe in checkbox #" + index + ": " + e.message);
                        throw e; // Stop mapping once we hit a bad one
                    }
                });

                //alert("üñºÔ∏è Displayed recipe filenames: " + displayedFilenames.join(', '));
            } catch (err) {
                //alert("üö® Error occurred while processing displayed checkboxes: " + err.message);
                console.error("üî¥ Debug Error Trace:", err);
            }

            const unselectedFilenames = displayedFilenames.filter(fn => !selectedFilenames.includes(fn));
            //alert("üì§ Unselected to replace: " + unselectedFilenames.join(", "));
   
            const response = await fetch('/update-unselected', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ exclude: selectedFilenames })
            });
    
            const newRecipes = await response.json();
            console.log("üì• New recipes returned by server:", newRecipes);
            //alert("üì• Server returned " + newRecipes.length + " recipes");

            // Replace unselected cards
            let i = 0;
            allDisplayedCheckboxes.forEach(box => {
                try {
                    const recipe = JSON.parse(decodeURIComponent(box.dataset.recipe));
                    if (!selectedFilenames.includes(recipe.filename) && i < newRecipes.length) {
                        const newR = newRecipes[i++];

                        if (!newR || !newR.filename || !newR.title || !newR.image || !newR.url) {
                            console.warn("‚ö†Ô∏è Skipping malformed recipe:", newR);
                            return;
                        }
                        console.log(`üîÑ Replacing [${recipe.filename}] with [${newR.filename}]`);

                        const card = box.closest('.recipe-card');
                        const newHTML = `
                            <div class="image-container">
                                <input type="checkbox" class="select-recipe"
                                    data-recipe="${encodeURIComponent(JSON.stringify(newR))}" />
                                <a href="${newR.url}">
                                    <img src="${newR.image}" alt="${newR.title}" onerror="this.src='/recipes429/images/default.jpg'">
                                </a>
                            </div>
                            <h3 class="recipe-title">${newR.title}</h3>
                        `;
                        card.innerHTML = newHTML;
                        attachCheckboxHandlers(); // Rebind for each newly injected recipe
                    }
                } catch (err) {
                    //alert("‚ùå Error replacing recipe card:" + err.message)
                    console.error("‚ùå Error replacing recipe card:", err);
                }
            });

    
            // Reattach checkbox handlers after replacing HTML
            attachCheckboxHandlers();
        }
    
            
    const serverSessionID = "<%= serverSessionID %>";
    // Check for serverSessionID mismatch
    const lastServerSession = sessionStorage.getItem('lastServerSession');
    if (lastServerSession !== serverSessionID) {
        console.log("üîÅ Server restarted ‚Äî clearing selection cache.");
        sessionStorage.removeItem('selectedRecipes');
        sessionStorage.setItem('lastServerSession', serverSessionID);
    }

    function goToSelectedPage() {
        window.location.href = '/selected-recipes';
      }


    // window.addEventListener('DOMContentLoaded', () => {
    //   const selectedRecipesKey = 'selectedRecipes';
    //   attachCheckboxHandlers();

    //     // ‚úÖ Add to DOMContentLoaded block (not search or tutorial popups)
    //     const displayed = JSON.parse(sessionStorage.getItem('displayedRecipes') || '[]');
    //     const currentDisplayed = Array.from(document.querySelectorAll('.random-recipes .select-recipe')).map(box => {
    //         const r = JSON.parse(box.dataset.recipe);
    //         return r.filename;
    //     });
    //     const updated = Array.from(new Set([...displayed, ...currentDisplayed]));
    //     sessionStorage.setItem('displayedRecipes', JSON.stringify(updated));


    //   function updateSelectedCount() {
    //     const selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    //     const countElement = document.getElementById('selected-count');
    //     if (countElement) {
    //       countElement.textContent = selected.length;
    //     }
    //     console.log("üì¶ Currently selected recipes:", selected);
    //   }
        
    //   document.querySelectorAll('.select-recipe').forEach((box, index) => {
    //     const recipe = JSON.parse(box.dataset.recipe);
        
    //     console.log(`üü° Checkbox #${index} initialized for [${recipe.title}] (${recipe.filename})`);
    
    //     let selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    
    //     if (selected.some(r => r.filename === recipe.filename)) {
    //       box.checked = true;
    //       console.log(`‚úÖ Pre-checking box: ${recipe.filename}`);
    //     }
    
    //     box.addEventListener('change', () => {
    //       selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    
    //       console.log(`üñ±Ô∏è Checkbox toggled for ${recipe.filename}. Checked: ${box.checked}`);
    
    //       if (box.checked) {
    //         if (!selected.some(r => r.filename === recipe.filename)) {
    //           selected.push(recipe);
    //           console.log(`‚ûï Added ${recipe.filename}`);
    //         }
    //       } else {
    //         selected = selected.filter(r => r.filename !== recipe.filename);
    //         console.log(`‚ûñ Removed ${recipe.filename}`);
    //       }
    
    //       sessionStorage.setItem(selectedRecipesKey, JSON.stringify(selected));
    //       updateSelectedCount();
    //     });
    //   });
    
    //   updateSelectedCount();
    // });
</script>
    
    
    



<!-- Floating View Selected Button -->
<div id="selected-recipes-float" style="position: fixed; bottom: 80px; right: 20px; z-index: 1000;">
    <button onclick="goToSelectedPage()">üß∫ View Selected (<span id="selected-count">0</span>)</button>
    </div>
    <div id="selected-recipes-float" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
        <button onclick="sessionStorage.removeItem('selectedRecipes'); location.reload();">
            üóëÔ∏è Clear Selected Recipes
        </button>
        </div>
    

<!-- üîî First-Time Tutorial Popup -->
<div id="tutorial-popup" class="popup-overlay">
    <div class="popup-box">
      <span class="close-popup" onclick="closePopup()">√ó</span>
      <h2>üç≥ Welcome to Recipe Explorer!</h2>
      <p>Want a quick tour of how to use this site?</p>
      <a href="/tutorial" class="popup-button">üëâ Show Me the Tutorial</a>
      <button onclick="closePopup()" class="popup-button skip">No Thanks</button>
    </div>
  </div>
  
  <script>
    function closePopup() {
      document.getElementById("tutorial-popup").style.display = "none";
      localStorage.setItem("tutorialPopupShown", "true");
    }
  
    // window.addEventListener("DOMContentLoaded", () => {
    //   const seen = localStorage.getItem("tutorialPopupShown");
    //   if (!seen) {
    //     const popup = document.getElementById("tutorial-popup");
    //     popup.style.display = "flex";
    //   }
    // });

// function attachCheckboxHandlers() {
//     // const selectedRecipesKey = 'selectedRecipes';

//     document.querySelectorAll('.select-recipe').forEach((box, index) => {
//         const recipe = JSON.parse(box.dataset.recipe);

//         let selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');

//         if (selected.some(r => r.filename === recipe.filename)) {
//             box.checked = true;
//         }

//         box.addEventListener('change', () => {
//             selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');

//             if (box.checked) {
//                 if (!selected.some(r => r.filename === recipe.filename)) {
//                     selected.push(recipe);
//                 }
//             } else {
//                 selected = selected.filter(r => r.filename !== recipe.filename);
//             }

//             sessionStorage.setItem(selectedRecipesKey, JSON.stringify(selected));
//             const countElement = document.getElementById('selected-count');
//             if (countElement) countElement.textContent = selected.length;
//         });
//     });
// }

const selectedRecipesKey = 'selectedRecipes';
// const displayedRecipesKey = 'displayedRecipes';
// const serverSessionID = "<%= serverSessionID %>";

function attachCheckboxHandlers() {
    document.querySelectorAll('.select-recipe').forEach((box, index) => {
        const recipe = JSON.parse(decodeURIComponent(box.dataset.recipe));
        let selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');

        if (selected.some(r => r.filename === recipe.filename)) {
            box.checked = true;
        }

        box.addEventListener('change', () => {
            selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');

            if (box.checked) {
                if (!selected.some(r => r.filename === recipe.filename)) {
                    selected.push(recipe);
                }
            } else {
                selected = selected.filter(r => r.filename !== recipe.filename);
            }

            sessionStorage.setItem(selectedRecipesKey, JSON.stringify(selected));
            updateSelectedCount();
        });
    });
}

function updateSelectedCount() {
    const selected = JSON.parse(sessionStorage.getItem(selectedRecipesKey) || '[]');
    const countElement = document.getElementById('selected-count');
    if (countElement) countElement.textContent = selected.length;
}

window.addEventListener('DOMContentLoaded', () => {
    // ‚úÖ Server restart handling
    const lastServerSession = sessionStorage.getItem('lastServerSession');
    if (lastServerSession !== serverSessionID) {
        console.log("üîÅ Server restarted ‚Äî clearing selection cache.");
        sessionStorage.removeItem(selectedRecipesKey);
        sessionStorage.removeItem(displayedRecipesKey);
        sessionStorage.setItem('lastServerSession', serverSessionID);
    }

    // ‚úÖ Load countries on continent change
    const continentSelect = document.getElementById('continent-select');
    const countrySelect = document.getElementById('country-select');

    continentSelect.addEventListener('change', async () => {
        const continent = continentSelect.value;
        if (!continent) {
            countrySelect.innerHTML = '<option value="">Select Country</option>';
            countrySelect.disabled = true;
            return;
        }

        try {
            const response = await fetch(`/getCountries?continent=${encodeURIComponent(continent)}`);
            if (!response.ok) throw new Error(`Server responded with ${response.status}`);

            const countries = await response.json();
            countrySelect.innerHTML = '<option value="">Select Country</option>';
            countries.forEach(country => {
                const option = document.createElement('option');
                option.value = country;
                option.textContent = country;
                countrySelect.appendChild(option);
            });
            countrySelect.disabled = false;

        } catch (error) {
            console.error("‚ùå Error loading countries:", error);
            alert("Failed to load countries. Please try again.");
        }
    });

    // ‚úÖ Attach checkboxes and update count
    attachCheckboxHandlers();
    updateSelectedCount();

    // // ‚úÖ Track displayed recipes (used for updateUnselectedRecipes)
    // const displayed = JSON.parse(sessionStorage.getItem(displayedRecipesKey) || '[]');
    // const currentDisplayed = Array.from(document.querySelectorAll('.random-recipes .select-recipe')).map(box => {
    //     const r = JSON.parse(box.dataset.recipe);
    //     return r.filename;
    // });
    // const updated = Array.from(new Set([...displayed, ...currentDisplayed]));
    // sessionStorage.setItem(displayedRecipesKey, JSON.stringify(updated));

    // ‚úÖ Show tutorial popup (only if first visit)
    const seen = localStorage.getItem("tutorialPopupShown");
    if (!seen) {
        const popup = document.getElementById("tutorial-popup");
        if (popup) popup.style.display = "flex";
    }
});


  </script>
  
</body>
</html>
